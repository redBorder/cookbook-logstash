filter {
  
  # Default direction
  mutate {
    add_field => {
      "direction" => "upstream"
    }
  }

  if ![tag] or [tag] == 0 {
    <% @flow_nodes.select{|s| s[:ipaddress] and s["redborder"] and s["redborder"]["homenets"] and !s["redborder"]["blocked"]}.each do |flow_node| %>
    if [peer_ip_src] == "<%=flow_node[:ipaddress]%>" {
      # Determine if direction is different than "upstream"
      ruby { 
        code => " require 'ipaddr'
                  
                  homenets = [<%=flow_node["redborder"]["homenets"].map{|h| "IPAddr.new('#{h["value"]}')"} .join(",")%>]

                  if homenets.any? {|subnet| subnet.include?(event.get('ip_src')) } 
                    if homenets.any? {|subnet| subnet.include?(event.get('ip_dst')) }
                      event.set('direction', 'internal')
                    else
                      event.set('direction', 'upstream')
                    end
                  elsif homenets.any? {|subnet| subnet.include?(event.get('ip_dst')) }
                    event.set('direction', 'downstream')
                  end
                 "
      }
    }
  <% end %>
  } else if [tag] == 1 {
      mutate { add_field => { "direction" => "downstream" } }
  } else if [tag] == 3 {
      mutate { add_field => { "direction" => "internal" } }
  }

  <% if @split_traffic_logstash %>
  if [tag2] {
    <% @proxy_nodes.each do |proxy_node| %>
      <% if !proxy_node["redborder"].nil? and proxy_node["redborder"]["blocked"]!=true %>
      if [peer_ip_src] == "<%=proxy_node[:ipaddress]%>" {
        ruby {
          code => "
            require 'ipaddr'
  
            ip_src = IPAddr.new(event.get('ip_src'))
            ip_dst = IPAddr.new(event.get('ip_dst'))
  
            tag2 = event.get('tag2')
            observation_tag2 = tag2

            <% role_name = "rBsensor-#{proxy_node.name.gsub('rbproxy-','')}" %>
            <% proxy_role = Chef::Role.load role_name rescue nil %>

            <% if proxy_role && proxy_role.override_attributes && proxy_role.override_attributes['redborder'] && proxy_role.override_attributes['redborder']['interfaces'] && !proxy_role.override_attributes['redborder']['interfaces'].empty? %>
              <% proxy_role.override_attributes['redborder']['interfaces'].each do |iface_key, _orig_iface| %>
              <% unless proxy_role.override_attributes['redborder']['interfaces'][iface_key]['observation_id_filters'].empty? %>
              observation_id_filters = <%= proxy_role.override_attributes['redborder']['interfaces'][iface_key]['observation_id_filters'].to_s.gsub('"', "'") %>
  
              observation_id_filters.each do |filter|
                subnet = IPAddr.new(filter['subnet'])
                observation_id = filter['observation_id']
  
                if subnet.include?(ip_src)
                  observation_tag2 = observation_id
                  break
                end
              end
  
              if observation_tag2 == tag2
                observation_id_filters.each do |filter|
                  subnet = IPAddr.new(filter['subnet'])
                  observation_id = filter['observation_id']
  
                  if subnet.include?(ip_dst)
                    observation_tag2 = observation_id
                    break
                  end
                end
              end
              <% end %>
              <% end %>
            <%end %>
  
            event.set('tag2', observation_tag2) if tag2 != observation_tag2
  
            "
          }
        }
      <% end %>
    <% end %>
    }
  <% end %>
}

