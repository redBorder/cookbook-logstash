filter {

  # Default values
  mutate {
    add_field => {
      "type" => "sflowv5"
      "ip_protocol_version" => 4
      "input_vrf" => 0
      "output_vrf" => 0
      "observation_id" => "default"
    }
    rename => {
      "packets" => "pkts"
      "export_proto_seqno" => "flow_sequence"
      "peer_ip_src" => "sensor_ip"
    }
  }


  # Set ip_proto
  if [ip_proto] == "udp" {
     mutate { add_field => { "l4_proto" => 17 } }
  } else if [ip_proto] == "tcp" {
     mutate {	add_field => { "l4_proto" => 6 } }
  }
  

  if [direction] == "downstream" { # Ingress when direction is downstream
    mutate {
      rename => {
        "ip_src" => "wan_ip"
        "ip_dst" => "lan_ip"
        "port_src" => "wan_l4_port"
        "port_dst" => "lan_l4_port"
        "country_ip_src" => "wan_ip_country_code"
        "country_ip_dst" => "lan_ip_country_code"
        "mac_dst" => "client_mac"
        "cisco_src_vlan" => "wan_vlan"
        "cisco_dst_vlan" => "lan_vlan"
        }
    }
    if ![tag] or [tag] == 0 {
      mutate {
        rename => {
          "vlan" => "lan_vlan"
          "src_vlan" => "lan_vlan"
          "dst_vlan" => "wan_vlan"
          "vlan_in" => "lan_vlan"
          "vlan_out" => "wan_vlan"
        }
        }
    }
    else {
      mutate {
        rename => {
          "vlan" => "wan_vlan"
          "src_vlan" => "wan_vlan"
          "dst_vlan" => "lan_vlan"
          "vlan_in" => "wan_vlan"
          "vlan_out" => "lan_vlan"
        }
      }
    }
  } else { # Egress when direction is upstream or internal..
    mutate {
      rename => {
        "ip_src" => "lan_ip"
        "ip_dst" => "wan_ip"
        "port_src" => "lan_l4_port"
        "port_dst" => "wan_l4_port"
        "country_ip_src" => "lan_ip_country_code"
        "country_ip_dst" => "wan_ip_country_code"
        "mac_src" => "client_mac"
        "cisco_src_vlan" => "lan_vlan"
        "cisco_dst_vlan" => "wan_vlan"
        "vlan" => "lan_vlan"
        "src_vlan" => "lan_vlan"
        "dst_vlan" => "wan_vlan"
        "vlan_in" => "lan_vlan"
        "vlan_out" => "wan_vlan"
      }
    }
  }

  # Set observation_id: (if 4294967295 -> "default")
  if [tag2] and [tag2] != 4294967295 {
    mutate { replace =>  { "observation_id" => "%{tag2}" } }
  }

  # Set timestamp, bytes and application_id_name  
  ruby { code => " event.set('timestamp', event.get('@timestamp').to_i);
                   event.set('bytes', event.get('bytes').to_i * (Integer(event.get('sampling_rate')) rescue 1))
                   event.set('application_id_name', event.get('class').split('/').last) if event.get('class') 
                 "
       }

  mutate {
   remove_field => [ "ip_proto", "tag", "tag2", "stamp_updated", "event_type", "@version", "stamp_inserted", "writer_id", "timestamp_arrival", "@timestamp", "sampling_rate" ]
  }


}